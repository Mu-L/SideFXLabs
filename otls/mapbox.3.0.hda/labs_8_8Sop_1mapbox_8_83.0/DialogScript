# Dialog script for labs::mapbox::3.0 automatically generated

{
    name	labs::mapbox::3.0
    script	gamedev::sop_mapbox
    label	"Labs Mapbox"

    help {
	""
    }

    inputlabel	1	"Sub-Network Input #1"
    inputlabel	2	"Sub-Network Input #2"
    inputlabel	3	"Sub-Network Input #3"
    inputlabel	4	"Sub-Network Input #4"
    outputlabel	1	"Terrain HeightField"
    outputlabel	2	"Terrain Mesh Converted from HeightField"
    outputlabel	3	"Terrain Mesh to Project OSM Onto"

    parm {
        name    "mode"
        label   "Mode"
        type    ordinal
        nolabel
        joinnext
        default { "0" }
        menu {
            "0" "Wait for Download"
            "1" "Cook Outputs"
        }
        parmtag { "script_callback_language" "python" }
    }
    parm {
        name    "download"
        label   "Download"
        type    button
        nolabel
        joinnext
        default { "0" }
        parmtag { "script_callback" "hou.phm().updateLocation(kwargs['node'])" }
        parmtag { "script_callback_language" "python" }
    }
    parm {
        name    "refreshviewport"
        label   "Refresh Viewport"
        type    button
        nolabel
        joinnext
        default { "0" }
        parmtag { "script_callback" "hou.phm().refreshViewport(kwargs['node'])" }
        parmtag { "script_callback_language" "python" }
    }
    parm {
        name    "reloadtex"
        label   "Reload Textures"
        type    button
        default { "0" }
        parmtag { "script_callback" "hou.phm().reloadTextures(kwargs['node'])" }
        parmtag { "script_callback_language" "python" }
    }
    parm {
        name    "sepparm6"
        label   "Spacer"
        type    separator
        default { "" }
        parmtag { "sidefx::layout_height" "small" }
        parmtag { "sidefx::look" "blank" }
    }
    group {
        name    "fd_general"
        label   "Location and Maps"
        grouptag { "group_type" "simple" }

        parm {
            name    "maps"
            label   "Maps"
            type    buttonstrip
            default { "3" }
            menutoggle {
                "0" "  Color  "
                "1" "  Elevation  "
            }
            parmtag { "script_callback" "hou.phm().updateMapSelection(kwargs['node'])" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "locmode"
            label   "Location Mode"
            type    ordinal
            default { "0" }
            menu {
                "0" "Latitude / Longitude / Zoom"
                "1" "Tile Index X / Tile Index Y / Zoom"
            }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "alignmode"
            label   "Tile Alignment"
            type    ordinal
            joinnext
            default { "0" }
            hidewhen "{ locmode == 1 }"
            menu {
                "0" "Custom-Cut Tile Centered at Lat/Lon"
                "1" "Precut Tile Containing Lat/Lon"
            }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "previewprecut"
            label   "View Precut Tile"
            type    button
            default { "0" }
            hidewhen "{ locmode == 1 } { alignmode == 0 }"
            parmtag { "script_callback" "hou.phm().viewPrecutTile(kwargs['node'])" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "lb_zoom_help"
            label   "lb_zoom_help"
            type    label
            default { "Zoom levels supported based on current settings: `ch(\"SCRIPTED_PARMS/zoomrange1\")`-`ch(\"SCRIPTED_PARMS/zoomrange2\")`" }
            parmtag { "sidefx::look" "block" }
        }
        parm {
            name    "latlonzoom"
            label   "Lat/Lon/Zoom"
            type    vector
            joinnext
            size    3
            default { "0" "0" "1" }
            disablewhen "{ locmode == 1 }"
            range   { -180! 180! }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "lookup_llz"
            label   "Look Up"
            type    button
            default { "0" }
            disablewhen "{ locmode == 1 }"
            parmtag { "script_callback" "hou.phm().launchMap(kwargs['node'])" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "xyzoom"
            label   "X/Y/Zoom"
            type    intvector
            joinnext
            size    3
            default { "0" "0" "1" }
            disablewhen "{ locmode == 0 }"
            range   { 0! 1 }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "lookup_xyz"
            label   "Look Up"
            type    button
            default { "0" }
            disablewhen "{ locmode == 0 }"
            parmtag { "script_callback" "hou.phm().launchMap(kwargs['node'])" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "syncloc_a"
            label   "Compute X/Y using Current Lat/Lon"
            type    button
            default { "0" }
            hidewhen "{ locmode == 1 }"
            parmtag { "script_callback" "hou.phm().syncLocation(kwargs['node'], 0)" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "syncloc_b"
            label   "Compute Lat/Lon using Current X/Y"
            type    button
            default { "0" }
            hidewhen "{ locmode == 0 }"
            parmtag { "script_callback" "hou.phm().syncLocation(kwargs['node'], 1)" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "offsets"
            label   "Tile Offset X/Y"
            type    intvector2
            size    2
            default { "0" "0" }
            range   { -1 1 }
            parmtag { "script_callback" "" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "sepparm5"
            label   "Separator"
            type    separator
            default { "" }
        }
        parm {
            name    "mapstyle"
            label   "Color Map Style"
            type    ordinal
            default { "satellite-v9" }
            hidewhen "{ maps != 1 maps != 3 }"
            menu {
                "streets-v12"           "Streets V12"
                "outdoors-v12"          "Outdoors V12"
                "light-v11"             "Light V11"
                "dark-v11"              "Dark V11"
                "satellite-v9"          "Satellite V9"
                "satellite-streets-v12" "Satellite Streets V12"
                "navigation-day-v1"     "Navigation Day V1"
                "navigation-night-v1"   "Navigation Night V1"
                "custom"                "Custom"
            }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "customstyle"
            label   "Custom Style"
            type    string
            default { "mapbox://styles/{username}/{style_id}" }
            hidewhen "{ maps != 1 maps != 3 } { mapstyle != custom }"
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "sepparm"
            label   "Spacer"
            type    separator
            default { "" }
            hidewhen "{ maps != 1 maps != 3 }"
            parmtag { "sidefx::layout_height" "small" }
            parmtag { "sidefx::look" "blank" }
        }
        groupcollapsible {
            name    "fd_tokens"
            label   "Mapbox Download Tokens"
            grouptag { "group_type" "collapsible" }

            parm {
                name    "apitokenisenv"
                label   "API Access Token Already Set as Environment Variable"
                type    toggle
                default { "isvariable(\"MAPBOX_API\")" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "accesstoken"
                label   "API Access Token"
                type    string
                default { "" }
                disablewhen "{ apitokenisenv == 1 }"
            }
            parm {
                name    "skutoken"
                label   "SKU Token"
                type    string
                joinnext
                default { "" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "refreshsku"
                label   "Refresh SKU Token"
                type    button
                nolabel
                default { "0" }
                parmtag { "script_callback" "hou.phm().refreshSKUToken(kwargs['node'])" }
                parmtag { "script_callback_language" "python" }
            }
        }

        groupcollapsible {
            name    "fd_paths"
            label   "Download Paths"
            grouptag { "group_type" "simple" }

            parm {
                name    "filepath_color"
                label   "Color Map"
                type    image
                default { "$HIP/maps/$HIPNAME/$OS.terrain_color.png" }
            }
            parm {
                name    "filepath_elev"
                label   "Elevation Map"
                type    image
                default { "$HIP/maps/$HIPNAME/$OS.terrain_elevation.png" }
            }
            parm {
                name    "tempdir"
                label   "Temp File Directory"
                type    directory
                default { "$HIP/maps/temp/$HIPNAME.$OS/" }
                parmtag { "script_callback_language" "python" }
            }
        }

    }

    group {
        name    "fd_general_1"
        label   "Tile Scale"

        groupsimple {
            name    "fd_width"
            label   "Width"

            parm {
                name    "widthmode"
                label   "Tile Width"
                type    ordinal
                default { "2" }
                menu {
                    "0" "Custom Width"
                    "1" "Real-World Width (Northern Border)"
                    "2" "Real-World Width (Center)"
                    "3" "Real-World Width (Southern Border)"
                    "4" "From Reference Mapbox SOP"
                }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "customwidth"
                label   "Custom Tile Width"
                type    float
                default { "1000" }
                hidewhen "{ widthmode > 0 }"
                range   { 0 100000 }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "refmapbox"
                label   "Reference Mapbox"
                type    oppath
                default { "" }
                disablewhen "{ widthmode != 4 }"
                hidewhen "{ widthmode != 4 }"
                parmtag { "opfilter" "!!SOP!!" }
                parmtag { "oprelative" "." }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "widthmul"
                label   "Width Scale"
                type    float
                default { "1" }
                hidewhen "{ widthmode == 4 }"
                range   { 0 10 }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "lb_finalwidth"
                label   "lb_finalwidth"
                type    label
                default { "Final Width: `ch(\"SCRIPTED_PARMS/finalwidth\")` m" }
                parmtag { "sidefx::look" "block" }
            }
        }

        groupsimple {
            name    "fd_elev"
            label   "Elevation"

            parm {
                name    "clampelev"
                label   "Clamp Input Elevation Range"
                type    toggle
                default { "0" }
                hidewhen "{ maps < 2 }"
                parmtag { "script_callback_language" "python" }
            }
            groupsimple {
                name    "fd_clampelev"
                label   "fd_clampelev"
                hidewhen "{ maps < 2 } { clampelev == 0 }"
                grouptag { "sidefx::look" "blank" }

                parm {
                    name    "doclampmin"
                    label   "Clamp Minimum"
                    type    toggle
                    nolabel
                    joinnext
                    default { "on" }
                    parmtag { "script_callback_language" "python" }
                }
                parm {
                    name    "clampmin"
                    label   "Elevation Min"
                    type    float
                    default { "0" }
                    disablewhen "{ doclampmin == 0 }"
                    range   { 0 10000 }
                    parmtag { "script_callback_language" "python" }
                }
                parm {
                    name    "doclampmax"
                    label   "Clamp Maximum"
                    type    toggle
                    nolabel
                    joinnext
                    default { "off" }
                    parmtag { "script_callback_language" "python" }
                }
                parm {
                    name    "clampmax"
                    label   "Elevation Max"
                    type    float
                    default { "8848" }
                    disablewhen "{ doclampmax == 0 }"
                    range   { 0 10000 }
                    parmtag { "script_callback_language" "python" }
                }
            }

            parm {
                name    "autoadjustelev"
                label   "Preserve Output Elevation to Real-World Width Ratio"
                type    toggle
                default { "1" }
                hidewhen "{ widthmode == 4 }"
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "customelevscale"
                label   "Custom Elevation Scale"
                type    float
                default { "1" }
                hidewhen "{ widthmode == 4 } { autoadjustelev == 1 }"
                range   { 0 10 }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "lb_finalelevscale"
                label   "lb_finalelevscale"
                type    label
                default { "Final Elevation Scale: `ch(\"SCRIPTED_PARMS/finalelevscale\")`" }
                parmtag { "sidefx::look" "block" }
            }
        }

        groupsimple {
            name    "fd_details"
            label   "Tile Geographical Details"

            parm {
                name    "sepparm3"
                label   "Spacer"
                type    separator
                default { "" }
                parmtag { "sidefx::layout_height" "small" }
                parmtag { "sidefx::look" "blank" }
            }
            parm {
                name    "refreshtileinfo"
                label   "Refresh"
                type    button
                default { "0" }
                parmtag { "script_callback" "hou.phm().updateLocation(kwargs['node'], False)" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "lb_tilerealwidths"
                label   "lb_tilerealwidths"
                type    label
                default { "Tile Real-World Widths:\n`ch(\"realwidth1\")` m  (Northern Border)\n`ch(\"realwidth2\")` m  (Center)\n`ch(\"realwidth3\")` m  (Southern Border)" }
                parmtag { "sidefx::look" "block" }
            }
            parm {
                name    "lb_tilebounds"
                label   "lb_tilebounds"
                type    label
                default { "Tile Real-World Bounds:\n`ch(\"bounds4\")`°  (North)\n`ch(\"bounds2\")`°  (South)\n`ch(\"bounds3\")`°  (East)\n`ch(\"bounds1\")`°  (West)" }
                parmtag { "sidefx::look" "block" }
            }
            parm {
                name    "lb_tilecenter"
                label   "lb_tilecenter"
                type    label
                default { "Tile Center Coordinates:\n`ch(\"centerlatlon1\")`°  (Latitude)\n`ch(\"centerlatlon2\")`°  (Longitude)" }
                parmtag { "sidefx::look" "block" }
            }
            parm {
                name    "sepparm4"
                label   "Spacer"
                type    separator
                default { "" }
                parmtag { "sidefx::layout_height" "small" }
                parmtag { "sidefx::look" "blank" }
            }
        }

        groupcollapsible {
            name    "fd_widthcalc"
            label   "Real-World Tile Width Calculator"

            parm {
                name    "calc_inlat"
                label   "Latitude"
                type    float
                default { "0" }
                range   { -90! 90! }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "calc_inzoom"
                label   "Zoom"
                type    integer
                default { "0" }
                range   { 0! 30 }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "calcwidth"
                label   "Compute Real-World Tile Width from Latitude and Zoom"
                type    button
                default { "0" }
                parmtag { "script_callback" "hou.phm().calcWidth(kwargs['node'])" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "calc_outwidth"
                label   "Real-World Tile Width"
                type    float
                default { "0" }
                range   { 0! 4.0075e+07 }
                parmtag { "script_callback_language" "python" }
                parmtag { "sidefx::slider" "none" }
            }
            parm {
                name    "lb_widthcalchelp"
                label   "lb_widthcalchelp"
                type    label
                default { "Even though the output tile is a square, on Earth's surface, the actual \ntile width changes even within the same tile based on the latitude. \nThis calculator can find the exact length of a west-east arc spanning \na tile at a given latitude. (This does not affect the node's cooking.)" }
                parmtag { "sidefx::look" "block" }
            }
        }

    }

    group {
        name    "fd_general_2"
        label   "Seamless Tiling"

        parm {
            name    "enabletiling"
            label   "Enable Seamless Tiling with Neighbour Tiles"
            type    toggle
            default { "0" }
            parmtag { "script_callback" "hou.phm().checkMaterials(kwargs['node'])" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "lb_tilinghelp"
            label   "lb_tilinghelp"
            type    label
            default { "All neighbour Mapbox SOPs need to have their maps downloaded \nbefore seamless tiling can work correctly.\n\nAll the tiles must share the same width. Pick one Mapbox SOP as \nthe reference node. On all the other Mapbox SOPs, set Tile Scale > \nTile Width to From Reference Mapbox SOP. Set their Reference \nMapbox to the reference node you picked.\n\nTileable Color Map is only used by materials. It can be rendered \nafter when the neighbours' Color Maps are available." }
            hidewhen "{ enabletiling == 1 }"
            parmtag { "sidefx::look" "block" }
        }
        groupsimple {
            name    "fd_neighbours"
            label   "Neighbour Tile Mapbox SOPs"
            hidewhen "{ enabletiling == 0 }"

            parm {
                name    "enablenb_t"
                label   "Enable Top Neighbour"
                type    toggle
                nolabel
                joinnext
                default { "1" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "mapboxsop_t"
                label   "Top Mapbox"
                type    oppath
                default { "" }
                disablewhen "{ enablenb_t == 0 }"
                parmtag { "opfilter" "!!SOP!!" }
                parmtag { "oprelative" "." }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "enablenb_r"
                label   "Enable Right Neighbour"
                type    toggle
                nolabel
                joinnext
                default { "1" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "mapboxsop_r"
                label   "Right Mapbox"
                type    oppath
                default { "" }
                disablewhen "{ enablenb_r == 0 }"
                parmtag { "opfilter" "!!SOP!!" }
                parmtag { "oprelative" "." }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "enablenb_c"
                label   "Enable Top-Right Neighbour"
                type    toggle
                nolabel
                joinnext
                default { "1" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "mapboxsop_c"
                label   "Top-Right Mapbox"
                type    oppath
                default { "" }
                disablewhen "{ enablenb_c == 0 }"
                parmtag { "opfilter" "!!SOP!!" }
                parmtag { "oprelative" "." }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "reloadnbcmaps"
                label   "Reload Neighbour Color"
                type    button
                joinnext
                default { "0" }
                parmtag { "script_callback" "hou.phm().reloadNeighbourColorMaps(kwargs['node'])" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "reloadnbemaps"
                label   "Reload Neighbour Elevation"
                type    button
                default { "0" }
                parmtag { "script_callback" "hou.phm().reloadNeighbourElevationMaps(kwargs['node'])" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "lb_neighbourshelp"
                label   "lb_neighbourshelp"
                type    label
                default { "Even if a tile only has bottom, left, or bottom-left neighbours, \nEnable Seamless Tiling with Neighbour Tiles should still be turned on." }
                hidewhen "{ enablenb_t == 1 mapboxsop_t != \"\" } { enablenb_r == 1 mapboxsop_r != \"\" } { enablenb_c == 1 mapboxsop_c != \"\" }"
                parmtag { "sidefx::look" "block" }
            }
        }

        groupsimple {
            name    "fd_tileablemat"
            label   "Tileable Material"
            hidewhen "{ maps != 1 maps != 3 } { enabletiling == 0 }"

            parm {
                name    "usetileablecmap"
                label   "Material Diffuse Texture"
                type    ordinal
                joinnext
                default { "1" }
                menu {
                    "0" "Color Map on Disk"
                    "1" "Tileable Color Map on Disk"
                }
                parmtag { "script_callback" "hou.phm().checkMaterials(kwargs['node'])" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "rendertileablecmap"
                label   "Render Tileable Color Map"
                type    button
                default { "0" }
                hidewhen "{ usetileablecmap == 0 }"
                parmtag { "script_callback" "hou.phm().renderTileableColorMap(kwargs['node'])" }
                parmtag { "script_callback_language" "python" }
            }
            groupcollapsible {
                name    "fd_tileablecmap"
                label   "Render"
                hidewhen "{ usetileablecmap == 0 }"

                parm {
                    name    "tileabletexfilter"
                    label   "Resample Filter"
                    type    ordinal
                    default { "0" }
                    menu {
                        "0" "Point  (Original Sharpness)"
                        "1" "Catmull-Rom  (Smoother)"
                    }
                    parmtag { "script_callback_language" "python" }
                }
                parm {
                    name    "improveptfilter"
                    label   "Soften Subtle Center Seams from Point Filter"
                    type    toggle
                    default { "1" }
                    hidewhen "{ tileabletexfilter == 1 }"
                    parmtag { "script_callback_language" "python" }
                }
                parm {
                    name    "crossmaskblursize"
                    label   "Seam Mask Radius"
                    type    float
                    default { "12" }
                    hidewhen "{ improveptfilter == 0 } { tileabletexfilter == 1 }"
                    range   { 0! 50 }
                    parmtag { "script_callback_language" "python" }
                }
                parm {
                    name    "crossmaskintensity"
                    label   "Seam Mask Intensity"
                    type    float
                    default { "3" }
                    hidewhen "{ improveptfilter == 0 } { tileabletexfilter == 1 }"
                    range   { 0! 5 }
                    parmtag { "script_callback_language" "python" }
                }
            }

            parm {
                name    "filepath_colort"
                label   "Tileable Color Map"
                type    image
                default { "$HIP/maps/$HIPNAME/$OS.terrain_color_tileable.png" }
                hidewhen "{ usetileablecmap == 0 }"
                parmtag { "script_callback_language" "python" }
            }
        }

    }

    group {
        name    "fd_general_3"
        label   "Output"

        groupsimple {
            name    "fd_hf"
            label   "HeightField"

            parm {
                name    "gridsamples"
                label   "Grid Resolution"
                type    integer
                default { "2048" }
                range   { 1! 2048 }
            }
            parm {
                name    "lb_blurhelp"
                label   "lb_blurhelp"
                type    label
                default { "Seamless tiling is on. Blurring is not allowed as it will create seams." }
                hidewhen "{ enabletiling == 0 }"
                parmtag { "sidefx::look" "block" }
            }
            parm {
                name    "blur"
                label   "Blur HeightField"
                type    toggle
                nolabel
                joinnext
                default { "0" }
                disablewhen "{ enabletiling == 1 }"
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "blurradius"
                label   "Blur Radius"
                type    float
                default { "0" }
                disablewhen "{ blur == 0 } { enabletiling == 1 }"
                range   { 0! 0.1 }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "heightscale"
                label   "Height Scale"
                type    float
                default { "1" }
                range   { 0 10 }
            }
            parm {
                name    "heightoffset"
                label   "Height Offset"
                type    float
                default { "0" }
                range   { -1000 1000 }
            }
            parm {
                name    "addmat_hf"
                label   "Add Material"
                type    toggle
                default { "0" }
                hidewhen "{ maps != 1 maps != 3 }"
                parmtag { "script_callback" "hou.phm().checkHFMaterial(kwargs['node'])" }
                parmtag { "script_callback_language" "python" }
            }
        }

        groupsimple {
            name    "fd_mesh"
            label   "Terrain Mesh Conversion"

            parm {
                name    "density"
                label   "Relative Density"
                type    float
                default { "1" }
                range   { 0.001! 2 }
            }
            parm {
                name    "addcolor"
                label   "Sample Point Color from Color Map"
                type    toggle
                default { "0" }
                hidewhen "{ maps != 1 maps != 3 }"
                parmtag { "script_callback" "hou.phm().checkPointColor(kwargs['node'])" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "ptfilter"
                label   "Color Sample Filter"
                type    string
                default { "point" }
                hidewhen "{ maps != 1 maps != 3 } { addcolor == 0 }"
                menu {
                    "point"     "Point  (Seamless Tiling)"
                    "box"       "Box"
                    "gauss"     "Gaussian"
                    "bartlett"  "Bartlett/Triangular"
                    "sinc"      "Sinc Sharpening"
                    "hanning"   "Hanning"
                    "blackman"  "Blackman"
                    "catrom"    "Catmull-Rom"
                    "mitchell"  "Mitchell"
                }
                range   { 0 1 }
            }
            parm {
                name    "ptcolorspace"
                label   "Source Color Space"
                type    ordinal
                default { "auto" }
                hidewhen "{ maps != 1 maps != 3 } { addcolor == 0 }"
                menu {
                    "auto"      "Automatic"
                    "linear"    "Linear"
                }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "addmat_mesh"
                label   "Add Material"
                type    toggle
                default { "0" }
                hidewhen "{ maps != 1 maps != 3 }"
                parmtag { "script_callback" "hou.phm().checkMeshMaterial(kwargs['node'])" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "sepparm9"
                label   "Separator"
                type    separator
                default { "" }
            }
            parm {
                name    "borderptgroup"
                label   "Border Point Group"
                type    string
                default { "mapbox_tile_border" }
                parmtag { "script_callback_language" "python" }
            }
        }

    }

    group {
        name    "fd_general_4"
        label   "Advanced"

        parm {
            name    "mapwinsize"
            label   "Look Up Window Size"
            type    vector2
            size    2
            default { "550" "620" }
            range   { -1 1 }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "mapres_color"
            label   "Color Map Size"
            type    ordinal
            default { "2048" }
            disablewhen "{ maps < 100 }"
            menu usetokenvalue {
                "1024"  "1024 × 1024"
                "2048"  "2048 × 2048"
            }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "mapres_elev"
            label   "Elevation Map Size"
            type    ordinal
            default { "1024" }
            disablewhen "{ maps < 100 }"
            menu usetokenvalue {
                "512"   "512 × 512"
                "1024"  "1024 × 1024"
            }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "allowdownloadretry"
            label   "Retry If Download Fails"
            type    toggle
            default { "0" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "retrydelay"
            label   "Retry Delay"
            type    float
            default { "5" }
            hidewhen "{ allowdownloadretry == 0 }"
            range   { 0! 30 }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "retrylimit"
            label   "Retry Limit"
            type    integer
            default { "3" }
            hidewhen "{ allowdownloadretry == 0 }"
            range   { 1! 10 }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "autodeltemp"
            label   "Auto Clean Up Temp Directory"
            type    toggle
            default { "1" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "sepparm7"
            label   "Separator"
            type    separator
            default { "" }
        }
        parm {
            name    "showautoparms"
            label   "Show Hidden Autofilled Parameters"
            type    toggle
            default { "0" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "sepparm8"
            label   "Spacer"
            type    separator
            default { "" }
            parmtag { "sidefx::layout_height" "small" }
            parmtag { "sidefx::look" "blank" }
        }
        groupsimple {
            name    "fd_autoparms"
            label   "Autofilled Parameters"
            hidewhen "{ showautoparms == 0 }"

            parm {
                name    "lb_autoparmshelp"
                label   "lb_autoparmshelp"
                type    label
                default { "Do not manually edit the following parameters." }
                parmtag { "sidefx::look" "block" }
            }
            parm {
                name    "pinrelpos"
                label   "Pin Relative Position"
                type    vector2
                size    2
                default { "0" "0" }
                range   { 0! 1! }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "realwidth"
                label   "Real-World Tile Width"
                type    float
                size    3
                default { "0" "0" "0" }
                range   { 0 10 }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "bounds"
                label   "Tile Bounds"
                type    float
                size    4
                default { "0" "0" "0" "0" }
                range   { -180 180 }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "centerlatlon"
                label   "Center Lat/Lon"
                type    float
                size    2
                default { "0" "0" }
                range   { -180 180 }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "enablemat_hf"
                label   "Enable HeightField Material"
                type    toggle
                default { "0" }
                parmtag { "script_callback" "" }
                parmtag { "script_callback_language" "python" }
            }
            parm {
                name    "enablemat_mesh"
                label   "Enable Mesh Material"
                type    toggle
                default { "0" }
                parmtag { "script_callback" "" }
                parmtag { "script_callback_language" "python" }
            }
        }

    }

}
