#type:     node
#context:  sop
#internal: labs::mapbox::3.0
#icon:     SOP/labs::mapbox::3.0
#since:    19.5


= Labs Mapbox =

"""Downloads real-world terrain tiles from Mapbox."""

This node downloads DEM (digital elevation model) data, satellite images, or other styles of color maps from Mapbox. It can output both terrain heightfields and terrain meshes.

NOTE:
    Please refer to [Mapbox|https://www.mapbox.com] for account registration, pricing, and [attribution|https://docs.mapbox.com/help/getting-started/attribution/] requirements.

TIP:
    If you are going to place this node inside another HDA, you need to add this node to the list of __Editable Nodes__ on that HDA.

Using this node requires one or two string tokens provided by Mapbox. The steps to acquire and set these tokens are described below.

== Setting Tokens ==

=== API Access Token ===

This is a long string token, needed for launching the interactive map, downloading maps, and acquiring the SKU token. To set it:

<p>1. Go to [Mapbox|https://www.mapbox.com] and create an account if you do not already have one.</p>
<p>2. Go to your [Mapbox account page|https://account.mapbox.com/]. Find your API access token under __Default public token__. Copy it.</p>
<p>3.a. Go to your Houdini user preference directory `$HOUDINI_USER_PREF_DIR` (on Windows OS, it is typically `C:\Users\...\Documents\houdiniX.Y`). Open __houdini.env__ with a text editor. Add a new line at the end: `MAPBOX_API = pk.***` (replace the `pk.***` part with your actual token). This sets the token as a Houdini environment variable, which is more convenient because the token does not change often.</p>
<p>3.b. Alternatively, paste the token to __Location and Maps__ > __Mapbox Download Tokens__ > __API Access Token__. This is less convenient because you have to do this for every _Labs Mapbos SOP_ you create.</p>

=== SKU Token ===

This is a short string token, needed for downloading elevation maps. To set it:

<p>1. On the __Location and Maps__ tab, launch the interactive map from either of the __Look Up__ buttons. On the interactive map window, pressing either __Set Location Only__ or __Set Location and Download__ will automatically set the SKU token.</p>

<p>2. If for whatever reason the SKU token is not set or not working, press __Mapbox Download Tokens__ > __Refresh SKU Token__, and then on the pop-up window, press __Get New SKU Token__.</p>

== Creating Seamless Terrain Tiles ==

=== Seamless Elevations, Colors, and Materials ===

You can join the output tiles of multiple _Labs Mapbox SOPs_ together to form a larger piece of terrain. To do so:

<p>1. Create multiple _Labs Mapbox SOPs_ that use the same location settings and tokens.</p>
<p>2. Move each tile to its intended location by setting __Location and Maps__ > __Tile Offset X/Y__. The unit of this parameter is one full tile width.</p>
<p>3. All the tiles must share the same width. The easiest way to do this is using one node to provide the reference tile width. On all the other nodes, set __Tile Scale__ > __Tile Width__ to __From Reference Mapbox SOP__, and then pointing __Reference Mapbox__ to the reference node.</p>
<p>4. Download all the selected maps on all the nodes.</p>
<p>5. Turn on __Seamless Tiling__ > __Enable Seamless Tiling with Neighbour Tiles__ on all the nodes.</p>
<p>6. Set the correct __Top Neighbour__, __Right Neighbour__, and __Top-Right Neighbour__ on all the nodes. Leave it blank if a tile does not have a certain neighbour.</p>
<p>7. (Optional) If you want to use the tileable color map for the materials, press __Seamless Tiling__ > __Tileable Material__ > __Render Tileable Color Map__ on all the nodes.</p>
<p>8. (Optional) If the location has changed, please re-download all the selected maps, re-render all the tileable color maps (if they are used), and re-enable any material/color parameters on the __Output__ tab that have been automatically turned off during the downloads to avoid texture sync issues.</p>

=== Seamless Normals ===

For both heightfield tiling and mesh tiling, it is impossible to make normals seamless with this node alone, because normals are inherently inconsistent between two sides of unfused borders. However, you can make normals seamless with a downstream _Labs Mapbox Post-process SOP_ that works on all the tiles at once.

== Troubleshooting ==

=== "Your file was not found / ERR_FILE_NOT_FOUND" ===

When launching the interactive map, if you see this error message, simply create a new _Labs Mapbox SOP_ in your network. That should immediately fix the problem and you can delete the new node you created. (Whenever this node is created, it automatically copies several HTML files to `$HOUDINI_USER_PREF_DIR/SideFXLabs/misc/mapbox/`. This error message means the node cannot find the necessary HTML files.)

=== Black screen ===

When launching the interactive map, if you see a black screen (often followed by a crash), there is likely some issue with connecting to the server or rendering the map view. Give it some time and then open a temporary, blank Houdini scene. Create a _Labs Mapbox SOP_ and try re-launching the interactive map. If the map is back to normal, you can return to your original Houdini scene.

=== Materials displays no texture ===

If a material does not display any texture, even if the texture file exists on disk, check if the viewport material toggle is on and that the material is enabled on the __Output__ tab. If everything looks normal, try pressing __Refresh Viewport__ before pressing __Reload Textures__. If there is still no texture, then this is most likely a rare deadlock that the viewport can enter when a material is being displayed while its texture path is pointing to a nonexistent file. If the viewport is already in this deadlock, you have to make sure the required texture is present on disk, and then restart Houdini.


@parameters

    Mode:
        #id: mode
        Controls whether to defer cooking until the maps are downloaded, or to immediately cook output geometries with existing maps.
            
    Download:
        #id: download
        Downloads the selected maps from Mapbox's servers.
        <p>When the download starts, all material/color parameters are automatically turned off to avoid texture sync issues. When you manually turn a material/color parameter back on, a safety check for texture dependencies is enforced through that parameter's callback script.</p>
        
    Refresh Viewport:
        #id: refreshviewport
        Press this if a terrain material in the viewport is displaying an out-of-date texture.
        
    Reload Textures:
        #id: reloadtex
        Press this to reload all the textures used by this node's internal COPs and SOPs. This is much slower than __Refresh Viewport__, so only press this when necessary.
        <p>While this should fix most texture sync issues, there is one rare exception when a material does not display any texture. Please see the __Troubleshooting__ section of the Help page.</p>
        
    == Location and Maps ==

    Maps:
        #id: maps
        The map(s) to include. This affects both the downloads and the output geometries.
            
    Location Mode:
        #id: locmode
        Specifies how to set the location of this tile. In most cases, it is probably easier to set the location using latitude and longitude, but the tile indices option is also provided for special use cases.
        <p>Latitude and longitude allow you to pin specific coordinates. Depending on __Tile Alignment__, you can either use the pinned coordinates as the center of your tile or coordinates your tile must contain.</p>
        <p>Mapbox's APIs divide Earth's surface into a grid of square tiles. We refer to these as "precut tiles" because their tile borders are predetermined and fixed. At each zoom level, a tile contains exactly 4 evenly divided tiles of the next zoom level. At zoom level 0, there is only 1 tile covering the whole Earth; at zoom level 1, 4 tiles; at zoom level 2, 16 tiles; and so on.</p>
        <p>The X index and Y index refer to a pair of integer indices associated with each tile at each zoom level. X increases from west to east. Y increases from north to south. The highest index at a given zoom level equals `pow(2, zoom) - 1`.</p>
            
    Tile Alignment:
        #id: alignmode
        Specifies whether you want to center your tile at the pinned coordinates. The centered option requires more map downloads. Mapbox APIs only allow you to download "precut tiles" (see __Location Mode__ for the definition), and only at the maximum resolution of 1024×1024 for color maps or 512×512 for elevation maps. In order to obtain higher resolution 2048×2048 color maps or 1024×1024 elevation maps, multiple maps of the next zoom level will be downloaded to composite the final maps.
        <p>__Custom-Cut Tile Centered at Lat/Lon__: 9 next-zoom-level maps will be downloaded, combined, and cropped to generate a custom tile centered at the pinned coordinates.</p>
        <p>__Precut Tile Containing Lat/Lon__: 4 next-zoom-level maps will be downloaded and combined to generate a precut tile containing the pinned coordinates.</p>

        NOTE:
            Please refer to your [Mapbox account|https://account.mapbox.com/] for detailed pricing information and usage statistics.
            
    View Precut Tile:
        #id: previewprecut
        Displays the precut tile containing the pinned coordinates. If __Tile Offset X/Y__ is {0, 0}, then this view should match the map you download.
        <p>This is different from __Look Up__, which when pressed, shows a view that is always centered at the pinned coordinates.</p>
        
    Lat/Lon/Zoom:
        #id: latlonzoom
        Latitude, longitude, and the zoom level. The zoom level must be an integer. If you keep the latitude and longitude fixed while changing the zoom level, it has the effect of zooming in/out at the same location.
        
    Look Up:
        #id: lookup_llz
        Launches an interactive map that allows you to set a new location and zoom level. The initial view is centered at the current latitude and longitude.
        <p>If you only see a black screen instead of the satellite image, please refer to the __Troubleshooting__ section of the Help page.</p>
        
    X/Y/Zoom:
        #id: xyzoom
        X and Y are precut tile indices (see __Location Mode__ for more information) at the given zoom level. Unlike with __Lat/Lon/Zoom__, it is meaningless to keep the X and Y fixed while changing the zoom level.
        
    Look Up:
        #id: lookup_xyz
        Launches an interactive map that allows you to set a new location and zoom level. The initial view shows the precut tile at the current precut tile indices.
        <p>If you only see a black screen instead of the satellite image, please refer to the __Troubleshooting__ section of the Help page.</p>
        
    Compute X/Y using Current Lat/Lon:
        #id: syncloc_a
        Computes the indices of the precut tile that contains the current latitude and longitude. This syncs locations for when you want to switch __Location Mode__.
        
    Compute Lat/Lon using Current X/Y:
        #id: syncloc_b
        Computes the center coordinates of the precut tile at the current precut tile indices. This syncs locations for when you want to switch __Location Mode__.
        
    Tile Offset X/Y:
        #id: offsets
        In integers, the number of full tile widths by which to offset the location. Positive X values offset the location to the east. Positive Y values offset the location to the south. This is mainly used for seamless tiling, where you want to join the output tiles of multiple _Labs Mapbox SOPs_ together to form a larger piece of terrain.
        
    Color Map Style:
        #id: mapstyle
        The style of the color map. Please visit [Mapbox Styles API|https://docs.mapbox.com/api/maps/styles/] to find out more about each style.

    Custom Style:
        #id: customstyle
        You can use [Mapbox Studio|https://www.mapbox.com/mapbox-studio] to design your own color map styles.
        
    === Mapbox Download Tokens ===

    API Access Token Already Set as Environment Variable:
        #id: apitokenisenv
        Automatically set based on whether the environment variable `MAPBOX_API` exists. Generally, you do not need to change this.
        
    API Access Token:
        #id: accesstoken
        A long string token tied to your Mapbox account. You can find it on your [Mapbox account page|https://account.mapbox.com/]. This is needed for launching the interactive map, downloading maps, and acquiring the SKU token. You can set it as a Houdini environment variable `MAPBOX_API` because this token does not change often.
        <p>Please follow the instructions on the Help page to set this token.</p>
        
    SKU Token:
        #id: skutoken
        A short string token needed for downloading elevation maps. According to Mapbox, this is only used to count MAU (monthly active users). Please refer to [Mapbox|https://www.mapbox.com] for more usage guidelines.
        <p>Please follow the instructions on the Help page to set this token.</p>
        
    Refresh SKU Token:
        #id: refreshsku
        Launches a pop-up window that allows you to acquire a new SKU token through [Mapbox GL JS API|https://docs.mapbox.com/mapbox-gl-js/api/].
        
    === Download Paths ===

    Color Map:
        #id: filepath_color
        The file path to the color map.
        
    Elevation Map:
        #id: filepath_elev
        The file path to the elevation map.
        
    Temp File Directory:
        #id: tempdir
        The folder for the temporary next-zoom-level maps used to composite the higher resolution final maps. When __Advanced__ > __Auto Clean Up Temp Directory__ is on, this folder is deleted after the final maps are generated.
        
    == Tile Scale ==

    === Width ===

    Tile Width:
        #id: widthmode
        Specifies what to use as the width (west-east arc length) of the terrain tile. Since the terrain tiles are always squares, the height (north-south arc length) of a tile will be the same as its width. The real-world widths are computed based on the latitude and the zoom level, using the [WGS 84 reference ellipsoid|https://en.wikipedia.org/wiki/Earth_ellipsoid#Reference_ellipsoid].
        <p>__Custom Width__: A custom width.</p>
        <p>__Real-World Width (Northern Border)__: The real-world width measured at the tile's northern border.</p>
        <p>__Real-World Width (Center)__: The real-world width measured at the tile's center.</p>
        <p>__Real-World Width (Southern Border)__: The real-world width measured at the tile's southern border.</p>
        <p>__From Reference Mapbox SOP__: The final tile width from a reference _Labs Mapbox SOP_.</p>
            
    Custom Tile Width:
        #id: customwidth
        In meters, the custom tile width.
        
    Reference Mapbox:
        #id: refmapbox
        The operator path to the reference _Labs Mapbox SOP_. When __Tile Width__ is __From Reference Mapbox SOP__, this node copies its final tile width and final elevation scale from the reference _Labs Mapbox SOP_.
        
    Width Scale:
        #id: widthmul
        A final multiplier to the tile width. This is ignored when __Tile Width__ is __From Reference Mapbox SOP__.
        
    === Elevation ===

    Clamp Input Elevation Range:
        #id: clampelev
        Clamps the elevation values sampled from the elevation map when generating the initial heightfield. This is applied before the height parameters on the __Output__ tab.

    Clamp Minimum:
        #id: doclampmin
        Applies a lower limit to input elevation values.
        
    Elevation Min:
        #id: clampmin
        In metres, the lower elevation limit. The sea level is at 0.
        
    Clamp Maximum:
        #id: doclampmax
        Applies a higher limit to input elevation values.
        
    Elevation Max:
        #id: clampmax
        The higher elevation limit. The peak of Mount Everest is at around 8848.
        
    Preserve Output Elevation to Real-World Width Ratio:
        #id: autoadjustelev
        Keeps elevation values proportional to the tile width. This allows you to uniformly scale the terrain. The elevation values in the elevation map are real-world values. The real-world tile width is the width measured at the tile center.
        
    Custom Elevation Scale:
        #id: customelevscale
        A custom multiplier to the input elevation. This is applied after __Clamp Input Elevation Range__ but before the height parameters on the __Output__ tab.
        
    === Tile Geographical Details ===

    Refresh:
        #id: refreshtileinfo
        Updates the tile's geographical details. These are also automatically updated when you download maps.
        
    === Real-World Tile Width Calculator ===

    Latitude:
        #id: calc_inlat
        The latitude at which to compute the real-world tile width.
        
    Zoom:
        #id: calc_inzoom
        The zoom level at which to compute the real-world tile width.
        
    Compute Real-World Tile Width from Latitude and Zoom:
        #id: calcwidth
        Computes the exact length of a west-east arc spanning a tile on Earth's surface.
        
    Real-World Tile Width:
        #id: calc_outwidth
        The computed result, autofilled when you press __Compute Real-World Tile Width from Latitude and Zoom__. If you want to use the real-world width measured at a specific latitude as your tile width, set __Tile Width__ to __Custom Width__ and use this result as __Custom Tile Width__.
        
    == Seamless Tiling ==

    Enable Seamless Tiling with Neighbour Tiles:
        #id: enabletiling
        Configures the tile to fetch maps from neighbour tiles in order to make elevations, colors, and materials seamless along the tile borders.
        <p>Seamless tiling only requires one-way awareness, meaning if every single tile syncs its border values with its top, right, and top-right neighbours, there is no need for any tile to sync with its left, bottom, or other corner neighbours.</p>
        <p>On this node alone, it is impossible to make normals seamless, because normals are inherently inconsistent between two sides of unfused borders. However, you can make normals seamless with a downstream _Labs Mapbox Post-process SOP_ that works on all the tiles at once.</p>
        <p>Please see the __Creating Seamless Terrain Tiles__ section of the Help page for more information.</p>
        
    === Neighbour Tile Mapbox SOPs ===

    Enable Top Neighbour:
        #id: enablenb_t
        Enables seamless tiling with the top (northern) neighbour tile, if it exists.
        
    Top Mapbox:
        #id: mapboxsop_t
        The operator path to the _Labs Mapbox SOP_ that generates the top (northern) neighbour tile. This is ignored if blank.
        
    Enable Right Neighbour:
        #id: enablenb_r
        Enables seamless tiling with the right (eastern) neighbour tile, if it exists.
        
    Right Mapbox:
        #id: mapboxsop_r
        The operator path to the _Labs Mapbox SOP_ that generates the right (eastern) neighbour tile. This is ignored if blank.
        
    Enable Top-Right Neighbour:
        #id: enablenb_c
        Enables seamless tiling with the top-right (north-eastern) neighbour tile, if it exists.
        
    Top-Right Mapbox:
        #id: mapboxsop_c
        The operator path to the _Labs Mapbox SOP_ that generates the top-right (north-eastern) neighbour tile. This is ignored if blank.
        
    Reload Neighbour Color:
        #id: reloadnbcmaps
        Forces all the neighbour nodes listed above, as well as this node itself, to reload color maps.
        
    Reload Neighbour Elevation:
        #id: reloadnbemaps
        Forces all the neighbour nodes listed above, as well as this node itself, to reload elevation maps.
        
    === Tileable Material ===

    Material Diffuse Texture:
        #id: usetileablecmap
        Specifies which diffuse texture to use for materials. For both terrain heightfields and terrain meshes, the border UVs are aligned to the centers of the border pixels. Since the terrain tile textures are not self-repeating, the texture tiling mode (in whatever application that uses this texture) should be set to "clamp" or its equivalents, not "wrap" or its equivalents.
        <p>__Color Map on Disk__: The original color map, not entirely seamless (when tiled at mipmap level 0). Since the border pixels have no knowledge of the neighbour color maps, most texture filtering modes (except for point filtering) will result in seams.</p>
        <p>__Tileable Color Map on Disk__: A new tileable color map that needs to be rendered to disk first, completely seamless (when tiled at mipmap level 0). This new map shares border pixel values with the top, right, and top-right neighbours. Consequently, texture filtering will not result in seams. You can render it when all the neighbours' color maps are available.</p>
            
    Render Tileable Color Map:
        #id: rendertileablecmap
        Renders to disk a new tileable color map. This map contains border pixel values copied from the neighbour nodes' color maps, so you should only render it when all the neighbour nodes' color maps are available.
        <p>Due to the dependencies on neighbour nodes, this map is not automatically updated when you press __Download__, so please remember to render this map again if the location has changed.</p>
        
    === Render ===

    Resample Filter:
        #id: tileabletexfilter
        In order to generate the tileable color map, the original color map is extended by 1 column of pixels to the right and 1 row of pixels to the top. The extended pixels copy the values from the neighbour nodes' color maps. That makes the texture tiling seamless, but the texture resolution becomes 2049×2049. To fix that, when you press __Render Tileable Color Map__, the new map is downsampled back to 2048×2048 using this filter.
        <p>__Point (Original Sharpness)__: Preserves the original sharpness but creates two subtle seams running horizontally and vertically through the center. Due to material texture filtering, these center seams are rather hard to notice compared to the border seams between the original color maps. In other words, using the tileable color map is probably still worth it.</p>
        <p>__Catmull-Rom (Smoother)__: Avoids any center seams but loses some of the sharpness.</p>
            
    Soften Subtle Center Seams from Point Filter:
        #id: improveptfilter
        Makes the already subtle center seams even harder to notice by blending the tileable color map with the original color map along the center seams.
        
    Seam Mask Radius:
        #id: crossmaskblursize
        In pixels, the maximum blend distance away from the center seams. The blend mask has a soft falloff.
        
    Seam Mask Intensity:
        #id: crossmaskintensity
        Adjusts the opacity of the blend mask. Higher values mean more influence from the original color map.
        
    Tileable Color Map:
        #id: filepath_colort
        The file path to the tileable color map.
        
    == Output ==

    === HeightField ===

    Grid Resolution:
        #id: gridsamples
        The resolution of the heightfield. The total voxel count is this number squared. The resolution of the converted mesh will be this number multiplied by __Terrain Mesh Conversion__ > __Relative Density__.
        
    Blur HeightField:
        #id: blur
        Makes the heightfield smoother by blurring the height values.
        
    Blur Radius:
        #id: blurradius
        In UV units, the blur radius. Higher values mean strong blurs. This is applied before __Height Scale__ and __Height Offset__.
        
    Height Scale:
        #id: heightscale
        Scales the height values. This is applied before __Height Offset__.
        
    Height Offset:
        #id: heightoffset
        Offsets the height values. This is applied after __Height Scale__.
        
    Add Material:
        #id: addmat_hf
        Performs a safety check for texture dependencies, and if the check is passed, adds a material to the terrain heightfield.
        <p>There is an important Python function in this parameter's callback script. If you are going to set this parameter through code, that callback script may not be triggered, in which case, please explicitly call that Python function in your code.</p>
        
    === Terrain Mesh Conversion ===

    Relative Density:
        #id: density
        The ratio of the mesh's resolution to the heightfield's resolution.
        
    Sample Point Color from Color Map:
        #id: addcolor
        Performs a safety check for texture dependencies, and if the check is passed, samples point colors from the color map.
        <p>Point color sampling never uses the tileable color map, which is strictly for materials.</p>
        
    Color Sample Filter:
        #id: ptfilter
        The filter for sampling point colors from the color map.
        
    Source Color Space:
        #id: ptcolorspace
        Specifies the color space of the color map. After sampling, the point colors stored in the mesh will typically be linear, and then the viewport will transform them to whatever color space the viewport is using.
            
    Add Material:
        #id: addmat_mesh
        Performs a safety check for texture dependencies, and if the check is passed, adds a material to the terrain mesh.
        <p>There is an important Python function in this parameter's callback script. If you are going to set this parameter through code, that callback script may not be triggered, in which case, please explicitly call that Python function in your code.</p>
        
    Border Point Group:
        #id: borderptgroup
        The name of the point group to be created that contains all the border points. This is used by a downstream _Labs Mapbox Post-process SOP_ to make border normals seamless between adjacent tiles.
        
    == Advanced ==

    Look Up Window Size:
        #id: mapwinsize
        The size of the window containing the interactive map. The interactive map itself has a fixed size of 512×512, which is the required size to match what you see in the window with what you actually download.
        
    Color Map Size:
        #id: mapres_color
        Currently only 2048×2048 is supported.
            
    Elevation Map Size:
        #id: mapres_elev
        Currently only 1024×1024 is supported.
            
    Retry If Download Fails:
        #id: allowdownloadretry
        Attempts to re-download a next-zoom-level map if the first attempt fails. This node downloads 9 or 4 next-zoom-level maps to composite a final map. The retries will happen per next-zoom-level map, so do not set __Retry Limit__ too high.
        
    Retry Delay:
        #id: retrydelay
        In seconds, the delay before attempting to re-download the same next-zoom-level map.
        
    Retry Limit:
        #id: retrylimit
        The maximum number of retries allowed for each next-zoom-level map.
        
    Auto Clean Up Temp Directory:
        #id: autodeltemp
        Deletes the folder containing the temporary next-zoom-level maps after the final maps are generated. The path to this folder is specified by __Location and Maps__ > __Download Paths__ > __Temp File Directory__.
        
    Show Hidden Autofilled Parameters:
        #id: showautoparms
        Unhides the autofilled parameters, which are a list of parameters automatically set by various parameter callback scripts when you interact with this node.
        
    === Autofilled Parameters ===

    Pin Relative Position:
        #id: pinrelpos
        The pinned coordinates' relative UV position within the center next-zoom-level map. This is only used when __Location Mode__ is __Latitude / Longitude / Zoom__ and __Tile Alignment__ is __Custom-Cut Tile Centered at Lat/Lon__.
        <p>This is automatically set when you download maps.</p>
        
    Real-World Tile Width:
        #id: realwidth
        The real-world tile widths measured at the tile's northern border, the center, and the southern border, in that order. This is referenced by __Tile Scale__ > __Tile Geographical Details__.
        <p>This is automatically set when you download maps or press __Tile Geographical Details__ > __Refresh__.</p>
        
    Tile Bounds:
        #id: bounds
        The longitude of the tile's western border, the latitude of the southern border, the longitude of the eastern border, and the latitude of the northern border, in that order. This is referenced by __Tile Scale__ > __Tile Geographical Details__.
        <p>This is automatically set when you download maps or press __Tile Geographical Details__ > __Refresh__.</p>
        
    Center Lat/Lon:
        #id: centerlatlon
        The latitude and longitude of the tile center. This is referenced by __Tile Scale__ > __Tile Geographical Details__.
        <p>This is automatically set when you download maps or press __Tile Geographical Details__ > __Refresh__.</p>
        
    Enable HeightField Material:
        #id: enablemat_hf
        What actually enables the heightfield material internally.
        <p>This is automatically set when you click on __Output__ > __HeightField__ > __Add Material__.</p>
        
    Enable Mesh Material:
        #id: enablemat_mesh
        What actually enables the mesh material internally.
        <p>This is automatically set when you click on __Output__ > __Terrain Mesh Conversion__ > __Add Material__.</p>

@examples

    - [Example File|https://github.com/sideeffects/SideFXLabs/blob/Development/hip/examples/mapbox/mapbox.3.0.hip]